<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"  version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap_compiling">
<title>Compiling, Running, Debugging CSS</title>

<para>This chapter describes how you, as a developer,
compile CSS from source code.
This allows you to execute CSS within the Eclipse development environment,
where you can edit the source code and execute it in the debugger.
</para>

<para>End users of CSS should not have to compile CSS.
In the control room, they should already find it installed.
For office use, a version of CSS that is already configured
for the local site can be available on a local web site.
CSS can self-update from that same web site
via the Eclipse update mechanism.
</para>

<para>To reach that stage, somebody at each institute that uses CSS
obviously needs to prepare such a local down-load site,
compile CSS with suitable settings and place the binaries on the web site.
Note that in addition to the CSS application that end users will see,
a complete installation will also require you to compile the Archive Engine, Alarm Server,
tools to configure the archive and alarm system, maybe more.
</para>


<sect1 xml:id="sec_build_modules">  <title>Source Repository, Build Modules, P2 Sites</title>

<para>As the amount of CSS source code grew, it has been split into several modules.
To build a CSS product from these, there are two extreme approaches.
</para>

<itemizedlist>
<listitem>
Prefer local source code:
You obtain the source code for each module and compile it.
Then you assemble your product from these locally created binaries.
</listitem>
<listitem>
Prefer remote binaries:
All CSS modules are already available in binary form.
You can use a minimal set of sources for just the product configuration,
and fetch all the required CSS module binaries from remote repositories.
</listitem>
</itemizedlist>

<para>Obtaining and compiling the complete source code is time consuming.
In practice, you often use an intermediate approach.
You obtain the source code for modules that you want to investigate further,
for example to fix a bug or to add new functionality.
For the remaining modules, you rely on binaries in a remote P2 repository.
</para>

<para>Which exact approach you use depends on your situation.
You may want to configure a local Hudson/Jenkins instance to perform a complete
nightly build for your site, obtaining all the source code and compiling it.
Or you may prefer to configure your Eclipse IDE target platform to use
remote P2 repositories, then import only the source code for a site specific
product and run it in the IDE.
Read through the remainder of this chapter to learn about the options and tools,
then make your decision.
</para>

</sect1>

<sect1 xml:id="sec_get_sources"> <title>Obtaining CSS Sources</title>

<para>The complete CSS sources are in a shared
GitHub<indexterm><primary>Git, GitHub</primary></indexterm><indexterm><primary>Source Code</primary></indexterm>
repository using the GIT version control system.
The project web site is
<link xlink:href="https://github.com/ControlSystemStudio">https://github.com/ControlSystemStudio</link>.
</para>

<para>For GIT in general, see
<link xlink:href="http://git-scm.com">http://git-scm.com</link>.
</para>

<sect2> <title>Maven OSGi Bundles</title>
<itemizedlist>
<listitem>https://github.com/ControlSystemStudio/maven-osgi-bundles.git</listitem>
</itemizedlist>

<para>This module lists external CSS dependencies, for example MySQL client libraries
or other common Java libraries. Their binaries are fetched from online repositories
outside of CSS, for example Maven central, and they are wrapped into Eclipse bundles.
</para>
</sect2>

<sect2> <title>Third party</title>
<itemizedlist>
<listitem>https://github.com/ControlSystemStudio/cs-studio-thirdparty.git</listitem>
</itemizedlist>

<para>This module contains sources provided by others which
needed minimal additions or modifications.
</para>
</sect2>

<sect2> <title>Diirt</title>
<itemizedlist>
<listitem>https://github.com/diirt/diirt.git</listitem>
</itemizedlist>

<para>See diirt documentation.
</para>
</sect2>

<sect2> <title>CS-Studio</title>
<itemizedlist>
<listitem>https://github.com/ControlSystemStudio/cs-studio.git</listitem>
</itemizedlist>

<para>This source repository contains the bulk of CSS sources.
It is structured into subdirectories <quote>core</quote> and <quote>applications</quote>,
which each have further subdirectories.
</para>
</sect2>

<sect2> <title>Common Product</title>
<itemizedlist>
<listitem>https://github.com/ControlSystemStudio/org.csstudio.product.git</listitem>
</itemizedlist>

<para>A generic CS-Studio product.
</para>
</sect2>

<sect2> <title>Site-Specific Products</title>
<itemizedlist>
<listitem>https://github.com/ControlSystemStudio/org.csstudio.askap.product.git</listitem>
<listitem>https://github.com/ControlSystemStudio/org.csstudio.dls.product.git</listitem>
<listitem>https://github.com/ControlSystemStudio/org.csstudio.ess.product.git</listitem>
<listitem>https://github.com/ControlSystemStudio/org.csstudio.iter.git</listitem>
<listitem>https://github.com/ControlSystemStudio/org.csstudio.nsls2.product.git</listitem>
<listitem>https://github.com/ControlSystemStudio/org.csstudio.sns.git</listitem>
<listitem>more ...</listitem>
</itemizedlist>

<para>Many sites create a set of products that combine desired common features
with site-specific additions, for example support for a local log book
or data sources.
</para>
</sect2>

<para>
Below is an example for fetching a complete copy of the source code.
If you choose to rely on remote binaries for all but the product,
you would only perform step 4.x.
</para>

<programlisting># Define base URL
GH=https://github.com/ControlSystemStudio

# 1) Maven bundles
git clone $GH/maven-osgi-bundles

# 2) Third party
git clone $GH/cs-studio-thirdparty

# 3) Diirt
git clone $GH/diirt

# 4) Bulk of CSS sources
git clone $GH/cs-studio

# Depending on your site, you would only fetch one of the following
# examples, or use one that you created for your own purposes

# 5.1) 'common' product
git clone $GH/org.csstudio.product

# 5.2) SNS products
git clone $GH/org.csstudio.sns

# 5.3) NSLS2 product
git clone $GH/org.csstudio.nsls2.product

# 5.4) Your product?
git clone you_would_need_to_know_what_to_get
</programlisting>

<para>The <code>master</code> branch of each repository contains the most recent set
of sources. For each release, there is a numbered release branch, for example <code>4.0.x</code>.
New functionality and bug fixes are added to the master branch, while the release branches
are only updated for essential bug fixes.
</para>

<para>To work on the CSS source code, i.e. to be able to submit changes, several steps are necessary:</para>
<orderedlist>
<listitem>Obtain GitHub account.</listitem>
<listitem>Become familiar with GIT.</listitem>
<listitem>Perform your changes on a branch or a forked repository.</listitem>
<listitem>Submit pull requests to merge your changes.</listitem>
</orderedlist>

</sect1>


<sect1> <title>P2 Repositories</title>

<para>When you compile CSS sources, building each module results in a P2 repository
of artifacts.<indexterm><primary>P2 Repository</primary></indexterm>
Compilation of a module typically depends on other previously created modules.
For example, compiling the cs-studio sources requires access to P2 repositories for the
maven-osgi-bundles and cs-studio-thirdparty artifacts.
</para>

<para>When you compile from sources, these P2 repositories will be created in subdirectories
<code>repository/target/repository</code> of your source tree.
If you prefer to skip local compilation and instead use remote repositories,
these are under <code>http://download.controlsystemstudio.org</code>.
In the following description of remote repository URLs, note that each URL contains a version number.
When working with a relased version, the URL simply contains the version number.
For the source code on the git <code>master</code> branch, the URL uses the next to-be-released
version number.
</para>

<sect2> <title>Diirt</title>
<para>Note that diirt uses a slightly different repository path and version numbering.</para>
<para>Local repository:</para>
<itemizedlist>
<listitem>diirt/p2/target/repository</listitem>
</itemizedlist>
<para>Remote repository:</para>
<itemizedlist>
<listitem>http://diirt.download.controlsystemstudio.org/diirt/3.1.6</listitem>
</itemizedlist>
</sect2>

<sect2> <title>Maven OSGi Bundles</title>
<para>Local repository:</para>
<itemizedlist>
<listitem>maven-osgi-bundles/repository/target/repository</listitem>
</itemizedlist>
<para>Remote repository:</para>
<itemizedlist>
<listitem>http://download.controlsystemstudio.org/maven-osgi-bundles/4.2</listitem>
</itemizedlist>
</sect2>

<sect2> <title>Third party</title>
<para>Local repository:</para>
<itemizedlist>
<listitem>cs-studio-thirdparty/repository/target/repository</listitem>
</itemizedlist>
<para>Remote repository:</para>
<itemizedlist>
<listitem>http://download.controlsystemstudio.org/thirdparty/4.2</listitem>
</itemizedlist>
</sect2>

<sect2> <title>CS-Studio</title>
<para>Local repositories:</para>
<itemizedlist>
<listitem>cs-studio/core/p2repo</listitem>
<listitem>cs-studio/applications/p2repo</listitem>
</itemizedlist>
<para>Remote repositories:</para>
<itemizedlist>
<listitem>http://download.controlsystemstudio.org/core/4.2</listitem>
<listitem>http://download.controlsystemstudio.org/applications/4.2</listitem>
</itemizedlist>
<para>The CS-Studio sources are split into core and applications,
which each result in their own repository.
</para>
</sect2>

<para>The Eclipse IDE as well as each CSS product contain the P2 Director
application<indexterm><primary>P2 Director</primary></indexterm>
which can be used to list the content of a repository:

<programlisting># Use either the Eclipse IDE or a CSS product.
# Both should include the Equinox launcher
# plugin which in turn contains the P2 director
export APP_PLUGINS=/path/to/my/eclipse

DIRECTOR="java \
 -jar $APP_PLUGINS/plugins/org.eclipse.equinox.launcher_*.jar \
 -debug -consolelog \
 -application org.eclipse.equinox.p2.director"

# List content of a remote repository.
$DIRECTOR -list -repository http://download.eclipse.org/releases/luna/

# List content of a local repository.
# Path needs to start with 'file://' and be absolute.
$DIRECTOR -list -repository \
 file://path/to/maven-osgi-bundles/repository/target/repository
</programlisting>
</para>

</sect1>


<sect1> <title>Composite P2 Repository</title>

<para>Assembling a product typically requires artifacts from <code>maven-osgi-bundles</code>,
<code>cs-studio-thirdparty</code>, <code>cs-studio/core</code>, <code>cs-studio/applications</code> and maybe locally
created site-specific additions.
</para>

<para>A composite P2 repository<indexterm><primary>Composite P2 Repository</primary></indexterm>
is simply a list of other P2 repositories.
It can list local as well as remote repositories, which is useful because you typically need to
use a combined approach.
For example, you may want to use remote repositories for <code>maven-osgi-bundles</code> and
<code>cs-studio-thirdparty</code>, but prefer locally created artifacts for the rest.
</para>

<para>To create a composite repository,
create a directory <code>my_comp_repo</code> in the same directory
that also contains the previously cloned source modules
with the following two files:
</para>

<programlisting>&lt;!-- File my_comp_repo/compositeContent.xml -->
&lt;?xml version='1.0' encoding='UTF-8'?>
&lt;?compositeMetadataRepository version='1.0.0'?>
&lt;repository name='Local Composite Repository'
type='org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository'
            version='1.0.0'>
  &lt;properties size='1'>
    &lt;property name='p2.atomic.composite.loading' value='false'/>
  &lt;/properties>
  &lt;children size="5">
    &lt;child location="http://download.controlsystemstudio.org/maven-osgi-bundles/4.2"/>
    &lt;child location="http://download.controlsystemstudio.org/thirdparty/4.2"/>
    &lt;child location="http://diirt.download.controlsystemstudio.org/diirt/3.1.6"/>
    &lt;child location="../cs-studio/core/p2repo"/>
    &lt;child location="../cs-studio/applications/p2repo"/>
  &lt;/children>
&lt;/repository>
</programlisting>


<programlisting>&lt;!-- File my_comp_repo/compositeArtifacts.xml -->
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;?compositeArtifactRepository version='1.0.0'?>
&lt;repository name="Local Composite Repository"
type="org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository"
            version="1.0.0">
  &lt;properties size='1'>
    &lt;property name='p2.atomic.composite.loading' value='false'/>
  &lt;/properties>
  &lt;children size="5">
    &lt;child location="http://download.controlsystemstudio.org/maven-osgi-bundles/4.2"/>
    &lt;child location="http://download.controlsystemstudio.org/thirdparty/4.2"/>
    &lt;child location="http://diirt.download.controlsystemstudio.org/diirt/3.0.1"/>
    &lt;child location="../cs-studio/core/p2repo"/>
    &lt;child location="../cs-studio/applications/p2repo"/>
  &lt;/children>
&lt;/repository>
</programlisting>

<para>In this example, we depend on remote repositories for <code>maven-osgi-bundles</code>
<code>cs-studio-thirdparty</code> and <code>diirt</code>, while using locally created artifacts for the rest.
For local child locations, entries starting in <code>file:/</code> refer to the root directory
and need to be absolute. The child locations in the example refer to locations relative
to the XML files.
</para>

<para>For further examples, check the <code>core/p2repo</code> or <code>applications/p2repo</code>
which themselves are composite repositories.
</para>

<para>The <code>p2.atomic.composite.loading</code> controls how missing child locations
are treated.
Setting it to <code>true</code> will check if all listed child locations contain valid repositories.
This can be used to test the correctnes of the composite repository settings.
On the other hand, when we start out fresh and compile the <code>cs-studio/core</code> module,
the <code>cs-studio/applications/p2repo</code> will not exist, yet, because it is generated
in a later step, so we need to set <code>p2.atomic.composite.loading</code> to <code>false</code>.
</para>


</sect1>


<sect1 xml:id="sec_tycho_build">  <title>Tycho/Maven Build</title>

<para><code>Maven</code><indexterm><primary>Maven</primary></indexterm><indexterm>
<primary>Compile with Tycho/Maven</primary></indexterm>
is a generic build tool for Java.
It uses <code>pom.xml</code><indexterm><primary>POM Files, pom.xml</primary></indexterm> files
to define how a piece of software needs to be compiled, and to list its dependencies.
Eclipse plugin sources already include
<code>META-INF/MANIFEST.MF</code><indexterm><primary>Manifest files, META-INF/MANIFEST.MF</primary></indexterm>
files for almost the same purpose.
<code>Tycho</code><indexterm><primary>Tycho</primary></indexterm>, a support module for Maven,
allows Maven to re-use the existing Manifest files to compile Eclipse source code.
</para>

<para>From now on, we will refer to the Tycho/Maven Build as simply the Maven Build.
To build CSS from sources with Maven, you need
</para>

<itemizedlist>
<listitem><code>Sources</code>:
    The sources you want to compile. Obtain them from Github as described earlier in
    this chapter. You only need to fetch those sources that you want to compile.
</listitem>
<listitem><code>java</code>:
    A Java Development Kit (JDK)<indexterm><primary>Java Development Kit, JDK</primary></indexterm>
    is necessary to compile the sources.
    It should be the JDK, not just a Java Runtime Environment (JRE).
    It should be the Sun/Oracle JDK.
    OpenJDK, the GNU Compiler for the Java (GCJ)
    and other environments are currently not fully compatible
    with the Sun/Oracle JDK.
    Google for <quote>Oracle JDK</quote>.
</listitem>
<listitem><code>mvn</code>:
    Maven.
    See <link xlink:href="http://maven.apache.org">http://maven.apache.org</link>.
</listitem>
</itemizedlist>

<para>Add the desired version of Java to the <code>JAVA_HOME</code>
environment variable as well as the <code>PATH</code>:
</para>
<programlisting>export JAVA_HOME=/path/to/the/jdk
export PATH=$JAVA_HOME/bin:$PATH
</programlisting>

<para>Verify that Maven is using the desired version of Java.
Note that the first Java found on your <code>$PATH</code> may not be what Maven uses
because it checks <code>$JAVA_HOME</code>.
Verify by checking the output of
</para>
<programlisting>mvn -version
</programlisting>

</sect1>


<sect1> <title>Configuring and Invoking Maven</title>

<para>When obtaining the Maven Build tools and CSS sources,
you may have noted that we fetched neither Tycho nor Eclipse.
The beauty of Maven is that it will download all dependencies,
including Tycho and Eclipse, and work like a charm as long as it feels like doing so.
The horror of Maven is that it always appears to download the internet.
When the commands listed in the following instructions
are run for the first time, Maven will initially download Tycho.
It will place Tycho in a local Maven repository,
typically under <code>~/.m2/repository</code>.
Subsequent calls will not require a complete download, but Maven will continue to check
remote sites for updates, even when invoking a simple <code>mvn clean</code> command.
</para>

<para>
<emphasis role="strong">Note:</emphasis>
If you have used Maven on a previous project, you may be familiar with executing it as <code>mvn install</code>.
This will compile the source code and place the results in the local
Maven repository. For compiling CSS, <emphasis>this is not recommended</emphasis>.
Do not invoke the Maven <code>install</code> command, because this will
result in version conflicts between artifacts that Maven then installs in its local
repository and the current sources of CSS.
Instead, we use <code>mvn verify</code>, and the generated CSS binaries
are placed in the previously described local P2 repositories within the source tree.
</para>

<para>If you do not further configure Maven, all CSS compilation will default to
using remote repositories.
For example, if you only obtained the source code for the common CSS product,
the following will build it, obtaining all required depdendencies from
remote repositories which are configured in the <code>pom.xml</code> files
of the product:
</para>
<programlisting># Compile common product
(cd org.csstudio.product; mvn clean verify)
</programlisting>

<para>As you develop CSS, you might prefer to download more of the source code
so that you can inspect and maybe modify it. You then configure a composite
repository that lists your locally created repositories, based on locally edited
sources, over the remote repositories.
To configure Maven to use your composite repository as well as additional settings,
create either a global file <code>$M2_HOME/conf/settings.xml</code>,
or in a user-specific file <code>$HOME/.m2/settings.xml</code>.
You could also specify the properties listed in this file on the command line,
invoking Maven as <code>mvn -Dcsstudio.composite.repo=..</code>,
but to assert consistency are best placed in a <code>/.m2/settings.xml</code> file
based on the following example:
</para>

<programlisting>&lt;!-- Maven settings.xml -->
&lt;settings>
  &lt;profiles>
    &lt;profile>
      &lt;id>my-css-settings&lt;/id>
      &lt;properties>
        &lt;!-- Optionally, configure a composite repo.
             By default, the Maven build will fetch all
             depenencies from remote repositories.
             In your composite repository, you can list
             local repositories.
          -->
        &lt;!-- Path to your composite repo -->
        &lt;csstudio.composite.repo>/path/to/my_comp_repo&lt;/csstudio.composite.repo>

        &lt;!-- By default, even if you use a composite repo
             that lists local P2 sites,
             Maven will still consult the remote CSS repos.
             Setting this property DISABLES downloads from
             http://download.controlsystemstudio.org,
             so you use _only_ sites listed in your composite repo.
             If you still want to use selected entries from
             http://download.controlsystemstudio.org,
             you can list them in your composite repo.
         -->
        &lt;cs-studio>false&lt;/cs-studio>
        &lt;eclipse>false&lt;/eclipse>

        &lt;!-- Ignore artifacts in ~/.m2/repository/p2,
             which some other "mvn install" may have placed
             there.
         -->
        &lt;tycho.localArtifacts>ignore&lt;/tycho.localArtifacts>

        &lt;!-- Issue warnings instead of aborting on error -->
        &lt;baselineMode>warn&lt;/baselineMode>
        &lt;jgit.dirtyWorkingTree>warning&lt;/jgit.dirtyWorkingTree>

        &lt;!-- Skip unit tests -->
        &lt;maven.test.skip>true&lt;/maven.test.skip>
        &lt;skipTests>true&lt;/skipTests>

      &lt;/properties>
    &lt;/profile>
  &lt;/profiles>

  &lt;!-- Enable the above settings -->
  &lt;activeProfiles>
    &lt;activeProfile>my-css-settings&lt;/activeProfile>
  &lt;/activeProfiles>
&lt;/settings>
</programlisting>

<para>To verify that your Maven setup uses the properties as you define
them in your settings file, you can use these commands
in any of the CSS source tree locations that contain a Maven <code>pom.xml</code>:
</para>
<programlisting># Should list "my-css-settings"
(cd maven-osgi-bundles; mvn help:active-profiles)

# In the long output, locate the &lt;properties> and
# verify they include what you entered in settings.xml
(cd maven-osgi-bundles; mvn help:effective-pom)
</programlisting>

<para>Finally, to build CSS from sources, run Maven like this:
</para>

<programlisting># To start fresh, clean your local repository
# If you have accidentally invoked
#   mvn install
# or want to assert that you start over fresh,
# delete the Maven repository:
rm -rf $HOME/.m2/repository

# If you want to compile the maven-osgi-bundles
# and listed its local repo in your composite repo,
# do it.
# Otherwise skip this step, and use the only repo
# for this module.
(cd maven-osgi-bundles; mvn -B -P my-css-settings clean verify)

# Similarly, compile cs-studio-thirdparty unless
# you prefer to use its binaries from a remote repo.
(cd cs-studio-thirdparty; mvn -B -P my-css-settings clean verify)

# Again if you prefer local mud
(cd diirt; mvn -B -P my-css-settings clean verify)

# If you want to compile core, ..
(cd cs-studio/core; mvn -B -P my-css-settings clean verify)

# If you want to compile applications, ..
(cd cs-studio/applications; mvn -B -P my-css-settings clean verify)

# Compile desired products
(cd org.csstudio.product; mvn -B -P my-css-settings clean verify)
# or:
(cd org.csstudio.sns; mvn -B -P my-css-settings clean verify)
# or:
(cd org.csstudio.nsls2.product; mvn -B -P my-css-settings clean verify)
</programlisting>

where <code>my-css-settings</code> is the identifier of the active profile in your maven settings file.

<para>After the last step, the created products can be found in
the following locations, depending on which products you built:
<programlisting>org.csstudio.product/repository/target/products
org.csstudio.sns/repository/target/products
org.csstudio.nsls2.product/repository/target/products
</programlisting>

Most products also create a P2 update repository from which the generated product
can install optional features, for example
<programlisting>org.csstudio.sns/repository/target/repository
</programlisting>
</para>

<para>After changes to the source code, you do not need to recompile everything.
If you change for example code under <code>cs-studio/applications/logbook</code>,
you can build only that sub-module of applications via
<programlisting>(cd cs-studio/applications/logbook; mvn -B -P my-css-settings verify)</programlisting>
</para>

<sect2> <title>Using Static Libraries</title>
<para>
  It is possible to use 2 static libraries containing all the Eclipse Mars plugins and sources,
  and all the CS-Studio plugins to simplify and speed-up the compilation process.
</para>
<para>
  To use these libraries the following procedures must be followed.
</para>
<procedure> <title>Preparing <emphasis>cs-studio-eclipse-4.3</emphasis> P2 Repository</title>
<step>
  Clone somewhere the following GitHub repository:
  <link xlink:href="https://github.com/ControlSystemStudio/org.csstudio.p2zip.eclipse-dependencies.git">org.csstudio.p2zip.eclipse-dependencies</link>.
</step>
<step>
  On a terminal window, <code>cd</code> on the cloned directory and execute
  <programlisting>mvn -B clean install</programlisting>
</step>
<step>
  Copy the <filename>target/cs-studio-eclipse-4.3-p2.zip</filename> inside the directory that will contain the static library.
  <code>cd</code> in that directory and execute
  <programlisting>unzip -u -q cs-studio-eclipse-4.3-p2.zip</programlisting>
</step>
<step>
  Optionally remove the <filename>cs-studio-eclipse-4.3-p2.zip</filename> file.
</step>
</procedure>
<procedure> <title>Preparing <emphasis>cs-studio-4.4</emphasis> P2 Repository</title>
<step>
  Clone somewhere the following GitHub repository:
  <link xlink:href="https://github.com/ControlSystemStudio/org.csstudio.p2zip.git">org.csstudio.p2zip</link>.
</step>
<step>
  On a terminal window, <code>cd</code> on the cloned directory and execute
  <programlisting>mvn -B clean install</programlisting>
</step>
<step>
  Copy the <filename>target/cs-studio-4.4-p2.tar.gz</filename> inside the directory that will contain the static library.
  <code>cd</code> in that directory and execute
  <programlisting>tar -zxvf cs-studio-4.4-p2.tar.gz</programlisting>
</step>
<step>
  Optionally remove the <filename>cs-studio-4.4-p2.tar.gz</filename> file.
</step>
</procedure>
<para>
  Now put inside your composite files two additional <emphasis>child location</emphasis> lines similar to the following:
</para>
<programlisting>
&lt;child location="somewhere/cs-studio-eclipse-4.3/p2repo"/&gt;
&lt;child location="somewhere/cs-studio-4.4/p2repo"/&gt;
</programlisting>
</sect2>

</sect1>




<sect1 xml:id="sec_runnning_in_ide">  <title>Using the Eclipse IDE</title>

<para>Fundamentally, using the Eclipse Integrated Development Environment
(IDE)<indexterm><primary>Integrated Development Environment (IDE)</primary></indexterm>
for CSS development is easy:<indexterm><primary>Compile in Eclipse IDE</primary></indexterm>
</para>
<orderedlist>
<listitem>Get Java and Eclipse</listitem>
<listitem>Get the CSS source code</listitem>
<listitem>Start Eclipse, import the sources</listitem>
<listitem>Open the <filename>*.product</filename> file for CSS, ArchiveEngine, ... and launch it.</listitem>
</orderedlist>

<para>The IDE allows you to run the products in debug mode,
setting breakpoints, examining the source code.
</para>
<para>Once the product is acceptable for use at your site, you can export
it from the IDE and install the result on the desired computers.
</para>

</sect1>

<sect1>  <title>Prerequisites</title>

<para>You need
<itemizedlist>
<listitem>Java Development Kit (JDK) as described in <xref linkend="sec_tycho_build"/>.
</listitem>
<listitem><quote>Eclipse IDE for RCP and RAP Developers</quote>.
    See <link xlink:href="https://www.eclipse.org/downloads">https://www.eclipse.org/downloads</link>.
</listitem>
<listitem>Desired source code from GIT repository as already described in <xref linkend="sec_get_sources"/>.
</listitem>
</itemizedlist>
</para>

<para>Both the JDK and the RCP IDE need to be a specific version, ask other CSS developers
for the currently supported versions.
</para>

<para>Start the Eclipse IDE, and assert that it uses the JDK:
<itemizedlist>
<listitem>Open the <code>Preferences</code> menu item.
It is usually in the <code>Windows</code> menu,
except for Mac OS X which offers it in the <code>Eclipse</code> menu.
</listitem>
<listitem>Locate entry <code>Java</code>, <code>Installed JREs</code>.</listitem>
<listitem>Assert that your JDK is listed and selected, otherwise use <code>Add</code> to add it, then select it as the default.</listitem>
<listitem>Open the preference for <code>Java</code>, <code>Compiler</code>,
          <code>Errors/Warnings</code>.
          Locate <code>Deprecated and restricted API</code>
          and change the handling of <quote>Forbidden reference (access rules)</quote>
          from Error to a Warning, or Ignored.
</listitem>
</itemizedlist>
</para>

<para>The Eclipse IDE includes Maven support, but not Tycho.
Since the CS-Studio sources are now based on Tycho pom.xml files,
the IDE needs to create the original IDE files when the sources are imported.
Add Tycho support to the IDE:
<itemizedlist>
<listitem>Open the <code>Preferences</code> menu item.</listitem>
<listitem>Locate entry <code>Maven</code>, <code>Discovery</code>.</listitem>
<listitem>Press <code>Open Catalog</code>, enter <code>tycho</code>, select the <code>Tycho Configurator</code>.</listitem>
<listitem>Press <code>Finish</code> and restart Eclipse when prompted.</listitem>
<listitem>After the restart, you should find the <code>Tycho Configurator</code> listed under the menu
          <code>Help</code>, <code>Installation Details</code>, <code>Installed Software</code>.
</listitem>
</itemizedlist>
</para>

<para>The IDE may still not understand all the maven commands found in the <code>pom.xml</code>.
This is not a problem, because several commands are only meant for maven execution outside of the IDE.
To ignore such errors:
<itemizedlist>
<listitem>Open the <code>Preferences</code> menu item.</listitem>
<listitem>Locate entry <code>Maven</code>, <code>Error/Warnings</code>.</listitem>
<listitem>Select <code>Ignore</code> for <code>Plugin execution not covered by lifecycle configuration</code>.</listitem>
</itemizedlist>
</para>

</sect1>


<sect1>  <title>Target Platform<indexterm><primary>Target Platform</primary></indexterm></title>

<para>Even if you import the complete CSS source code into the Eclipse IDE,
you still need certain external dependencies that are not included in the source code.
The Maven Build obtains external resources from online repositories listed in the <code>pom.xml</code> files.
While the Eclipse IDE reads the <code>pom.xml</code> files to some extend,
it will not fetch external resources.
</para>

<para>An Eclipse <code>Target Platform</code> lists a set of plugins that the IDE
uses when compiling source code.
By default, the target platform of the IDE includes only the IDE itself.
For CSS development, you need a target platform that includes the following:
</para>

<itemizedlist>
<listitem>Correct version of the IDE.
          At times, CSS source code might be locked to a specific version of Eclipse.
          Your IDE may be the <quote>latest</quote>, newer than the version required for CSS sources,
          because your target platform provides the Eclipse plugins required
          to compile CSS.
</listitem>
<listitem>External dependencies. While the Maven build fetches these based on
          information in the <code>pom.xml</code> files, the IDE requires them
          to be included in the target platform.
</listitem>
<listitem>Binaries for the CSS source code.
          This is optional, but if your target platform contains all the CSS binaries,
          you no longer need to import the complete CSS source code into the IDE.
          Instead, you can import only the sources which you want to study or extend.
          The IDE will favor source code that you have imported over the corresponding
          binaries in the target platform, so you can continue to import more source
          code as required.
</listitem>
</itemizedlist>


<sect2> <title>Local Target: Result of Maven Build</title>
<para>Once you completed the Maven Build from the command line as described earlier in this chapter,
you can use that as your target platform.
</para>

<itemizedlist>
<listitem>Open the menu <code>Preferences</code>, <code>Plug-in Development</code>, <code>Target Platform</code>.</listitem>
<listitem>Select <code>Add</code>, then the option to base the new target on the <code>Default</code>.</listitem>
<listitem>Enter a name, for example <quote>IDE and Local</quote>.</listitem>
<listitem><code>Add</code> a <code>Directory</code>.
Browse to the <code>repository/target/repository</code> of your product build tree, or to the actual binary product
which has a <code>plugins</code> subdirectory.
</listitem>
<listitem>Press <code>Finish</code>, and assert that your new target platform is selected as the active one.</listitem>
</itemizedlist>

<para>This option has the advantage that your IDE target platform contains
only locally available plugins, avoiding the sometimes problematic resolution of
remote dependencies.
</para>
<para>On the downside, this approach requires you to first build everything from sources using the Maven command line.
The resulting target will only contain those artifacts that were required to build a specific product.
</para>

</sect2>

</sect1>


<sect1 xml:id="sec_import_into_IDE">  <title>Import Sources Into IDE</title>

<para>
You only need to import the sources on which you want to work.
For example, you can import just the product sources, then start the product
within the IDE. All its dependencies, for example required <filename>cs-studio/core</filename>
plugins, will be obtained from the target platform.
</para>
<para>
If you want to work on plugins from <filename>cs-studio/applications</filename> or
<filename>cs-studio/core</filename>, you can later import them as needed.
</para>
<para>
To import the desired sources into the IDE:
</para>

<itemizedlist>
<listitem>In the IDE, select the menu <code>File/Import...</code>, <code>Maven</code>, <code>Existing Maven Project</code>.</listitem>
<listitem>As a root directory, you generally select the top-level directory as it was cloned from GIT,
          for example the <filename>org.csstudio.product</filename> directory.
          For the <filename>cs-studio</filename> source tree, select either the
          <filename>cs-studio/core</filename> or
          <filename>cs-studio/applications</filename> subdirectory,
          or a specific sub module like <filename>cs-studio/applications/logbook</filename>.
</listitem>
<listitem>Check the option <code>Add Projects to Working Set</code> and enter a suitable name.</listitem>
<listitem>Press <code>Finish</code>.</listitem>
<listitem>After waiting a little while, you likely need to reset the sources to their original state
          as described below because Eclipse will update <filename>.classpath</filename> files, see below.
</listitem>
</itemizedlist>

<para>In the Eclipse <code>Package Explorer</code><indexterm><primary>Project Explorer</primary></indexterm>,
select the view drop-down menu <code>Top Level Elements</code> and pick <code>Working Sets</code>.
</para>

<para>The IDE should now compile the imported sources.
There should be no compilation errors.
</para>

</sect1>

<sect1>  <title>Using Products in IDE</title>

<para>Open one of the <code>*.product</code> files, for example
<programlisting>org.csstudio.product/repository/cs-studio.product</programlisting>
or
<programlisting>org.studio.sns/repository/basic-epics.product</programlisting>

You can use the Eclipse <code>Search</code>, <code>File</code> menu to
locate all available product files as shown in <xref linkend="fig_comp_search_prod"/>
</para>

<figure xml:id="fig_comp_search_prod">  <title>Locating all Product Files</title>
  <mediaobject>
    <imageobject><imagedata fileref="comp_search_prod.png" width="75%" format="PNG"/></imageobject>
  </mediaobject>
</figure>

<para>When you open an Eclipse product file, it will be displayed as per <xref linkend="fig_comp_product"/>.
In the <code>Overview</code> tab, first press <code>Synchronize</code>,
then press <code>Launch an Eclipse Application</code> to run the product from within the IDE.
The product should start up.
</para>

<figure xml:id="fig_comp_product">  <title>Eclipse Product Editor</title>
  <mediaobject>
    <imageobject><imagedata fileref="comp_product.png" width="100%" format="PNG"/></imageobject>
  </mediaobject>
</figure>


<para>When running a product from within the IDE for the first time,
the main goal is that the product should <emphasis>start</emphasis>.
It may then stop because of missing command line arguments,
but there should be no errors regarding missing plugins or compilation problems.
</para>

<para>The product may not start up, instead reporting errors like
<quote>Product ....could not be found</quote> or <quote>Missing required bundle ...</quote>,
even though the Maven Build resulted in a product that starts without errors.
This results from the Maven Build automatically including required plugins, while
the IDE expects each plugin that you want to include in the product to be listed
in the product file or its features.
</para>
<para>Ideally, all products would include their dependencies such that the same
product file can be used by the Maven build as well as the IDE without changes.
Meanwhile, you can invoke the menu <code>Run</code>, <code>Run Configurations..</code>.
Locate the configuration for the product, open its <quote>Plug-ins</quote> tab.
Press <code>Validate Plug-Ins</code> to identify unresolved plugins, i.e. missing dependencies.
Either manually add the plugins that were reported as missing,
or try the <code>Add Required Plug-ins</code> button to add them automatically.
While the <code>Add Required Plug-ins</code> button is easier to use than the manual approach,
it tends to overzealously add test fragments to the procuct which are not actually required.
</para>

<para>In the case of the command-line products like the Alarm Server it might soon exit with an error message indicating
that it requires command-line arguments.
It is of course trivial to provide command-line arguments when invoking such tools as intended from the shell.
During development and initial testing, though, it can be more convenient to execute CSS products
from within the IDE.
To add command-line arguments<indexterm><primary>Command-line arguments in IDE</primary></indexterm>
to products executed in the IDE,
invoke the menu <code>Run</code>, <code>Run Configurations..</code>.
Locate the configuration for the product, open its <quote>Arguments</quote> tab.
The <quote>Program Arguments</quote> section may already contain entries like
<code>-os ${target.os}</code>.
Add your desired command-line arguments to the end of the program arguments.
</para>

<para>Once you get the product to run: Congratulations!
Almost as easy as running the product is debugging<indexterm><primary>Debugging</primary></indexterm> it:
Instead of running the product again from the menu <code>Run</code>, <code>Run History</code>,
you select <code>Run</code>, <code>Debug History</code> to start the product in debug mode.
You can browse the source code, set breakpoints by double-clicking at the start of a source line,
then step through the code from the breakpoint on.
</para>
</sect1>


<sect1>  <title>JUnit Tests, Headless JUnit Tests</title>
<para>The Eclipse IDE has good support for executing
JUnit tests<indexterm><primary>JUnit test</primary></indexterm>
and test-driven development<indexterm><primary>Test-driven Development</primary></indexterm>
in general.
You can start many programming tasks by <emphasis>first</emphasis> implementing
the JUnit test, using the IDE <quote>Quick Fix</quote> feature to create
skeletons for the required classes and interfaces, which you then fill
with the actual code until the test passes.
</para>
<para>You will find several JUnit tests in the CSS plugin code because
a lot of it was implemented in a test-driven fashion.
These classes are often found in a <filename>test/</filename> source folder,
and the source files will be named <filename>*Test.java</filename> or <filename>*Demo.java</filename>.
</para>
<para>To execute a JUnit test, you simply right-click on the class file in the
Project Navigator and select <code>Run As</code>, <code>JUnit Test</code>.
Some tests will need configuration files to specify database URLs or other
site-specific parameters. Refer to comments in the source code for details.
</para>
<para>Eclipse supports a special type of JUnit test to allow testing
within the Eclipse runtime environment. This is necessary for tests that depend
on the Eclipse plugin registry and preference system.
Tests that require the plug-in runtime should be in source files
named <filename>*PluginTest.java</filename> or <filename>*HeadlessTest.java</filename>.
To execute them, select <code>Run As</code>, <code>JUnit Plug-in Test</code>
from the file context menu.
</para>
<para>When you invoke such a JUnit Plug-in Test<indexterm><primary>JUnit Plug-in Test</primary></indexterm>
for the first time, the IDE will create a run configuration that loads all
the plugins found in your workspace.
If the plugin containing your test refers to Eclipse user interface plugins,
the plugin test configuration will in addition start an instance of the complete Eclipse IDE
with all your workspace plugins, then execute the test.
This can take a long time and be overkill for what you want to test.
</para>
<para>A <quote>Headless</quote><indexterm><primary>Headless Plugin-in Test</primary></indexterm>
plugin test is a test that requires the Eclipse plugin runtime environment
but <emphasis>not</emphasis> the complete IDE user interface.
Such test source files are typically named <filename>*HeadlessTest.java</filename>.
To invoke such a test, you can once execute it via <code>Run As</code>, <code>JUnit Plug-in Test</code>
to create the basic run configuration, but then you should edit it as follows:
</para>
<itemizedlist>
<listitem>Menu <code>Run</code>, <code>Run Configurations...</code>
</listitem>
<listitem>Locate the <code>JUnit Plug-in Test</code> that was created for your headless test.</listitem>
<listitem>
<para>On the <code>Main</code> tab, select <code>Run an application</code> with the option
<code>[No Application] - Headless Mode</code>.
</para>
<para>This will significantly reduce the startup time of your test because you avoid a copy
of the Eclipse IDE.
</para>
</listitem>
<listitem>
<para>In the <code>Arguments</code> tab, you might need to add a program argument
<code>-pluginCustomization /path/to/your/settings.ini</code>
if your test needs certain preference settings.
</para>
</listitem>
<listitem>
<para>In the <code>Plug-ins</code> tab, by default all plugins in your workspace will be included.
You can change that to only include selected plug-ins, which can reduce the startup time
and might also be necessary to test the behavior of your test in case it depends
on certain other plugins being available or not.
</para>
</listitem>
</itemizedlist>
</sect1>


<sect1 xml:id="sec_prod_export_from_ide">  <title>Product Export from IDE</title>

<para>End users of CSS cannot be expected to open the IDE, install the source code,
and then run CSS from within the IDE. They need a product that executes
from their <quote>start</quote> menu or a desktop link.
The preferred way to create standalone products is via the Maven Build described
earlier in this chapter, because that results in a complete set of products
for all target architectures.
Occasionally, however, it can be faster to create a single standalone product for testing
by <quote>exporting</quote><indexterm><primary>Exporting a Product</primary></indexterm>
the product from the IDE.
</para>

<figure xml:id="fig_comp_export">  <title>Product Export Dialog</title>
  <mediaobject>
    <imageobject><imagedata fileref="comp_export.png" width="40%" format="PNG"/></imageobject>
  </mediaobject>
</figure>

<para>To export a product, open the product file that was already shown in <xref linkend="fig_comp_product"/>
and press the <code>Eclipse Product export wizard</code> link in the Overview tab.
This will open the Eclipse product export dialog, see <xref linkend="fig_comp_export"/>,
where you enter the following:
</para>

<orderedlist>
<listitem>
<para>As a Root Directory, enter the name of the product, for example ArchiveEngine, CSS, ...
You could include a version number, for example MyCSS-4.0.
</para>
<para>Use only a directory <emphasis>name</emphasis>, no path! This is the name of the directory that will
contain the generated executable and associated files.
</para>
</listitem>
<listitem>
<para>Enter a Directory <emphasis>path</emphasis> where the exported product should be placed,
for example <filename>/usr/fred/CSS/bin</filename>
</para>
<para>Enter a full path for this option! In the end, the name from the previous option
will be appended to this directory path, so your product will end up in a directory
similar to <filename>/usr/fred/CSS/bin/MyCSS-4.0</filename>.
</para>
<para>Also assert that the directory that you selected is <emphasis role="strong">empty</emphasis>!
When you export a product into a directory that already contains a product, maybe an older version
of the same product, Eclipse will attempt to add the new code to the existing content,
similar to an online update of an existing product.
That is probably not what you want, so export into a an empty directory.
</para>
</listitem>
<listitem>You might want to un-check the option to <quote>Generate metadata repository</quote></listitem>
<listitem>Finish</listitem>
</orderedlist>

<para>You should now have a directory like <filename>/usr/fred/CSS/bin/MyCSS-4.0</filename>
 that contains a <code>css</code> executable.
You can copy that directory to other computers and run it there.
One method of deployment would be to offer a ZIP file of the exported product on a web page.
</para>

<para>If you left the option to
<quote>Generate metadata repository</quote> checked,
Eclipse will generate also an update repository,
see <xref linkend="chap_update_repo"/>.
</para>


<sect2> <title>Command-line Products for Windows</title>
<para>
Command-line applications, in Eclipse called
<quote>headless</quote><indexterm><primary>Headless RCP Application</primary></indexterm> RCP applications,
are invoked from a terminal window, i.e. the Linux shell, Mac OS X terminal, or Windows Command Prompt.
They are configured via command-line arguments, and they print information to the terminal.
</para>
<para>
<emphasis role="strong">
Note that there is currently a limitation for command-line products on Windows!
</emphasis>
Headless RCP applications work fine on Linux and Mac OS X, but in the Windows command line tool
<filename>cmd.exe</filename> you will by default <emphasis>not see any output from headless RCP applications</emphasis>.
The problem<indexterm><primary>Headless RCP Application Problem on Windows</primary></indexterm>
is related to the fact that Java for Windows includes both
<filename>javaw.exe</filename> and <filename>java.exe</filename> because Windows distinguishes
between GUI and console applications. <code>javaw -version</code> invoked in <code>cmd.exe</code>
will not display any output, either.
</para>

<para>Eclipse for Windows likewise includes launchers
<filename>eclipse.exe</filename> and <filename>eclipsec.exe</filename>.
Headless products like an <filename>ArchiveEngine</filename>, <filename>AlarmServer</filename> etc.
should use <filename>eclipsec.exe</filename> as their launcher, but there is currently no
way to specify this in the product configuration, see also
the bug report on <quote>Support for exporting eclipsec.exe in RCP apps</quote>,
<link xlink:href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=185205">https://bugs.eclipse.org/bugs/show_bug.cgi?id=185205</link>.
</para>

<para>For the time being, the only solution is to manually replace the generated launcher, for example
<filename>AlarmServer.exe</filename>, with a copy of <filename>eclipsec.exe</filename>:
</para>
<programlisting>copy \path\to\eclipsec.exe AlarmServer.exe</programlisting>
<para>After replacing the original executable with a copy of <filename>eclipsec.exe</filename>,
you can invoke the <filename>AlarmServer.exe</filename> from within the Windows Command Prompt,
and you will see its command line output inside the Command Prompt window.
If you start the <filename>AlarmServer.exe</filename> via double-clicks from the Windows Explorer,
i.e. not from within a Command Prompt, it will actually open a new Command Prompt in which it can
then display command line output.
</para>
</sect2>

</sect1>


<sect1>  <title>Delta Pack, Cross-Platform Export</title>

<para>The product that you export from the IDE is by default limited to the operating system
on which it was exported because of the OS-dependent launcher and SWT libraries, see
<xref linkend="sec_rcp"/>.
To export code for different platforms, you need the Eclipse <quote>Delta Pack</quote><indexterm><primary>Delta Pack</primary></indexterm>.
With the Delta Pack installed, Eclipse on OS X can for example build products for Windows, Linux, and OS X.
Same for Linux and Windows.
</para>

<para>To obtain the delta pack:</para>

<orderedlist>
<listitem>Goto the Downloads section on <link xlink:href="http://www.eclipse.org/">http://www.eclipse.org/</link>.</listitem>
<listitem>Select <quote>Projects</quote>, <quote>Eclipse Project</quote>.</listitem>
<listitem>Select the version of Eclipse that you are using, for example 4.4.</listitem>
<listitem>Locate the Delta Pack, a file like <filename>eclipse-4.4-delta-pack.zip</filename>.</listitem>
</orderedlist>

<para>To use the delta pack:</para>

<orderedlist>
<listitem>Extract the delta pack archive into its own directory on disk.
The result should be an <filename>eclipse</filename> directory with sub-directories
<filename>plugins</filename> and <filename>features</filename>
</listitem>
<listitem>Open the Target Platform preferences:
Menu <code>Preferences</code>, <code>Plug-in Development</code>, <code>Target Platform</code>.
</listitem>
<listitem>Edit the active target. Add an <quote>Installation</quote>, using the path to the delta pack's
<filename>eclipse</filename> directory.
</listitem>
</orderedlist>

<para>When you now export a product from the IDE, there will be a new option
<quote>Export to multiple platforms</quote>.
</para>
</sect1>

<note>
	<para>
		In the Mars release, delta pack zip file is no longer available on
		the download page. The reason for removing it was that p2 can be used
		instead, so it saves complications in the Platform build, and does not
		take up redundant space making the same stuff available in multiple
		ways.
	</para>
	<para>
		Goto <link xlink:href="https://wiki.eclipse.org/Building#Multi-platform_build">Multi-platform build</link>
		wiki page for more information about it and the full instructions to
		setup multi-platform build on the new Eclipse releases.
	</para>
</note>



<sect1>  <title>Feature Patch<indexterm><primary>Feature Patch</primary></indexterm></title>
<para>A side effect of the headless build and a P2-managed product
is that it is no longer possible to simply replace plugins in a product
with new versions.
If you replace a plugin JAR file with a different version, even if the
names exactly match, P2 will recognize the change because of checksums.
It will refuse to load the modified plugin, because it was part of the
original configuration.
In the spirit of maintaining a well defined product with known content,
this makes sense. Occasionally, however, it is a big nuisance:
Fixes to small bugs are no longer possible via basic plugin updates.
Instead, you have to create a new product by incrementing all version
numbers, perform a complete headless build, then publish the new product
and its repository on the update site.
</para>
<para>A feature patch can be used to update only part of a product
while maintaining full configuration control.
Assume our current product contains a plugin
<code>org.csstudio.trends.databrowser2</code>
with version number 3.0.1
that we intend to replace with a newer version 3.0.2.
We need to determine which feature provides that plugin
in the product-to-update, and we need to determine
its exact version, including a possible date/time qualifier.
If you do not know which feature provided the original plugin,
search the files in the <filename>features</filename> subdirectory
of the installed product. Assume we find that the plugin was
provided as part of the feature
</para>
<programlisting>org.csstudio.trends.databrowser2.feature_3.0.1.20110715
</programlisting>

<para>Create a new Feature Patch project in the Eclipse IDE:
</para>
<itemizedlist>
<listitem>As a project name you can for example use <quote>databrowser3.0.1.patch</quote>.
</listitem>
<listitem>In the <quote>Properties of feature being patched</quote> section
of the project wizard enter the
<quote>Feature ID</quote> of the original feature,
i.e. <code>org.csstudio.trends.databrowser2.feature</code>.
</listitem>
<listitem>Under <quote>Feature Version</quote> be sure to enter
the correct version that you intend to update,
i.e. <code>3.0.1.20110715</code>.
</listitem>
<listitem>Add the plugins that should be updated with the patch,
i.e. <code>org.csstudio.trends.databrowser2</code>.
The feature that we are patching might contain many more plugins,
but in the patch we only include what we want to add or replace.
Assert that the version numbers of all the plugins that you want
to replace have been incremented from their installed version.
</listitem>
</itemizedlist>

<para>You can now export the feature patch, using an archive file
like <filename>databrowser3.0.1.patch.zip</filename> as the target,
and then use that ZIP file to install the patch into your product
via the menu item <code>Help</code>, <code>Install New Software...</code>
by adding the ZIP file to the available software sites.
</para>
<para>As a result, the original <code>org.csstudio.trends.databrowser2</code>
plugin is replaced with the new one, while P2 remains fully aware of what
version of which plugin was installed from where, so it will for example
allow you to un-install the patch, or later add additional feature patches.
</para>
</sect1>

<sect1 xml:id="sec_headless_build">  <title>Headless Build</title>

<para>The Headless Build<indexterm><primary>Headless Build</primary></indexterm>
is similar to the Tycho/Maven Build, but using older tools.
Originally, it was the standard way to compile CSS source code from the command line,
for example as part of nightly builds.
It has been replaced by the Tycho/Maven Build.
</para>
</sect1>


</chapter>
